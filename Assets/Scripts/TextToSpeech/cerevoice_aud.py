# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cerevoice_aud', [dirname(__file__)])
        except ImportError:
            import _cerevoice_aud
            return _cerevoice_aud
        if fp is not None:
            try:
                _mod = imp.load_module('_cerevoice_aud', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cerevoice_aud = swig_import_helper()
    del swig_import_helper
else:
    import _cerevoice_aud
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


CPRC_SC_WAITING = _cerevoice_aud.CPRC_SC_WAITING
CPRC_SC_PLAYING_MID = _cerevoice_aud.CPRC_SC_PLAYING_MID
CPRC_SC_PLAYING_LAST_FRAME = _cerevoice_aud.CPRC_SC_PLAYING_LAST_FRAME
CPRC_SC_PLAYED = _cerevoice_aud.CPRC_SC_PLAYED
CPRC_CUE_ERROR = _cerevoice_aud.CPRC_CUE_ERROR
CPRC_CUE_OK = _cerevoice_aud.CPRC_CUE_OK
CPRC_CUE_RESTART = _cerevoice_aud.CPRC_CUE_RESTART
CPRC_SC_MONO = _cerevoice_aud.CPRC_SC_MONO
CPRC_SC_STEREO = _cerevoice_aud.CPRC_SC_STEREO

def CPRC_sc_player_new(*args):
  """CPRC_sc_player_new(int sample_rate) -> CPRC_sc_player"""
  return _cerevoice_aud.CPRC_sc_player_new(*args)

def CPRC_sc_player_delete(*args):
  """CPRC_sc_player_delete(CPRC_sc_player player)"""
  return _cerevoice_aud.CPRC_sc_player_delete(*args)

def CPRC_sc_player_stream_time(*args):
  """CPRC_sc_player_stream_time(CPRC_sc_player player) -> double"""
  return _cerevoice_aud.CPRC_sc_player_stream_time(*args)

def CPRC_sc_player_stream_duration(*args):
  """CPRC_sc_player_stream_duration(CPRC_sc_player player) -> double"""
  return _cerevoice_aud.CPRC_sc_player_stream_duration(*args)

def CPRC_sc_player_samples_sent(*args):
  """CPRC_sc_player_samples_sent(CPRC_sc_player player) -> long"""
  return _cerevoice_aud.CPRC_sc_player_samples_sent(*args)

def CPRC_sc_player_sample_rate(*args):
  """CPRC_sc_player_sample_rate(CPRC_sc_player player) -> int"""
  return _cerevoice_aud.CPRC_sc_player_sample_rate(*args)

def CPRC_sc_audio_short(*args):
  """CPRC_sc_audio_short(short data, int len) -> CPRC_sc_audio"""
  return _cerevoice_aud.CPRC_sc_audio_short(*args)

def CPRC_sc_audio_short_disposable(*args):
  """CPRC_sc_audio_short_disposable(short data, int len) -> CPRC_sc_audio"""
  return _cerevoice_aud.CPRC_sc_audio_short_disposable(*args)

def CPRC_sc_audio_short_alloc(*args):
  """CPRC_sc_audio_short_alloc(short data, int len, int alloc) -> CPRC_sc_audio"""
  return _cerevoice_aud.CPRC_sc_audio_short_alloc(*args)

def CPRC_sc_audio_pythonstr(*args):
  """CPRC_sc_audio_pythonstr(wavedata data, int len) -> CPRC_sc_audio"""
  return _cerevoice_aud.CPRC_sc_audio_pythonstr(*args)

def CPRC_sc_audio_status(*args):
  """CPRC_sc_audio_status(CPRC_sc_audio audio) -> enum CPRC_SC_STAT"""
  return _cerevoice_aud.CPRC_sc_audio_status(*args)

def CPRC_sc_audio_channel_type(*args):
  """CPRC_sc_audio_channel_type(CPRC_sc_audio audio) -> enum CPRC_SC_CHANNEL"""
  return _cerevoice_aud.CPRC_sc_audio_channel_type(*args)

def CPRC_sc_audio_channel(*args):
  """CPRC_sc_audio_channel(CPRC_sc_audio audio, enum CPRC_SC_CHANNEL chan)"""
  return _cerevoice_aud.CPRC_sc_audio_channel(*args)

def CPRC_sc_audio_start_time(*args):
  """CPRC_sc_audio_start_time(CPRC_sc_audio audio) -> double"""
  return _cerevoice_aud.CPRC_sc_audio_start_time(*args)

def CPRC_sc_audio_delete(*args):
  """CPRC_sc_audio_delete(CPRC_sc_audio audio)"""
  return _cerevoice_aud.CPRC_sc_audio_delete(*args)

def CPRC_sc_audio_play(*args):
  """CPRC_sc_audio_play(CPRC_sc_player player, CPRC_sc_audio cue) -> int"""
  return _cerevoice_aud.CPRC_sc_audio_play(*args)

def CPRC_sc_audio_cue(*args):
  """CPRC_sc_audio_cue(CPRC_sc_player player, CPRC_sc_audio cue) -> enum CPRCTHD_CUE"""
  return _cerevoice_aud.CPRC_sc_audio_cue(*args)

def CPRC_sc_sleep_msecs(*args):
  """CPRC_sc_sleep_msecs(int msecs)"""
  return _cerevoice_aud.CPRC_sc_sleep_msecs(*args)

def CPRC_sc_audio_busy(*args):
  """CPRC_sc_audio_busy(CPRC_sc_player player) -> int"""
  return _cerevoice_aud.CPRC_sc_audio_busy(*args)

def CPRC_sc_audio_pauseon(*args):
  """CPRC_sc_audio_pauseon(CPRC_sc_player player) -> int"""
  return _cerevoice_aud.CPRC_sc_audio_pauseon(*args)

def CPRC_sc_audio_pauseoff(*args):
  """CPRC_sc_audio_pauseoff(CPRC_sc_player player) -> int"""
  return _cerevoice_aud.CPRC_sc_audio_pauseoff(*args)

def CPRC_sc_audio_paused(*args):
  """CPRC_sc_audio_paused(CPRC_sc_player player) -> int"""
  return _cerevoice_aud.CPRC_sc_audio_paused(*args)

def CPRC_sc_audio_stop(*args):
  """CPRC_sc_audio_stop(CPRC_sc_player player) -> int"""
  return _cerevoice_aud.CPRC_sc_audio_stop(*args)
class lock(_object):
    """Proxy of C++ lock class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lock, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["lock"] = _cerevoice_aud.lock_lock_set
    __swig_getmethods__["lock"] = _cerevoice_aud.lock_lock_get
    if _newclass:lock = _swig_property(_cerevoice_aud.lock_lock_get, _cerevoice_aud.lock_lock_set)
    __swig_destroy__ = _cerevoice_aud.delete_lock
    __del__ = lambda self : None;
lock_swigregister = _cerevoice_aud.lock_swigregister
lock_swigregister(lock)

class wavmono(_object):
    """Proxy of C++ wavmono class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wavmono, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wavmono, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frameIndex"] = _cerevoice_aud.wavmono_frameIndex_set
    __swig_getmethods__["frameIndex"] = _cerevoice_aud.wavmono_frameIndex_get
    if _newclass:frameIndex = _swig_property(_cerevoice_aud.wavmono_frameIndex_get, _cerevoice_aud.wavmono_frameIndex_set)
    __swig_setmethods__["maxFrameIndex"] = _cerevoice_aud.wavmono_maxFrameIndex_set
    __swig_getmethods__["maxFrameIndex"] = _cerevoice_aud.wavmono_maxFrameIndex_get
    if _newclass:maxFrameIndex = _swig_property(_cerevoice_aud.wavmono_maxFrameIndex_get, _cerevoice_aud.wavmono_maxFrameIndex_set)
    __swig_setmethods__["data"] = _cerevoice_aud.wavmono_data_set
    __swig_getmethods__["data"] = _cerevoice_aud.wavmono_data_get
    if _newclass:data = _swig_property(_cerevoice_aud.wavmono_data_get, _cerevoice_aud.wavmono_data_set)
    __swig_setmethods__["num_samples"] = _cerevoice_aud.wavmono_num_samples_set
    __swig_getmethods__["num_samples"] = _cerevoice_aud.wavmono_num_samples_get
    if _newclass:num_samples = _swig_property(_cerevoice_aud.wavmono_num_samples_get, _cerevoice_aud.wavmono_num_samples_set)
    __swig_setmethods__["sample_rate"] = _cerevoice_aud.wavmono_sample_rate_set
    __swig_getmethods__["sample_rate"] = _cerevoice_aud.wavmono_sample_rate_get
    if _newclass:sample_rate = _swig_property(_cerevoice_aud.wavmono_sample_rate_get, _cerevoice_aud.wavmono_sample_rate_set)
    def __init__(self): 
        """__init__(self) -> wavmono"""
        this = _cerevoice_aud.new_wavmono()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cerevoice_aud.delete_wavmono
    __del__ = lambda self : None;
wavmono_swigregister = _cerevoice_aud.wavmono_swigregister
wavmono_swigregister(wavmono)


def get_buffer(*args):
  """get_buffer(int max_sz, int sample_rate) -> wavmono"""
  return _cerevoice_aud.get_buffer(*args)

def pythonstr(*args):
  """pythonstr(wavedata data, int len, int sample_rate) -> wavmono"""
  return _cerevoice_aud.pythonstr(*args)

def delete_buffer(*args):
  """delete_buffer(wavmono data)"""
  return _cerevoice_aud.delete_buffer(*args)

def startrecording(*args):
  """startrecording(wavmono data) -> PortAudioStream"""
  return _cerevoice_aud.startrecording(*args)

def startplaying(*args):
  """startplaying(wavmono data) -> PortAudioStream"""
  return _cerevoice_aud.startplaying(*args)

def killstream(*args):
  """killstream(PortAudioStream stream) -> int"""
  return _cerevoice_aud.killstream(*args)

def continueplaying(*args):
  """continueplaying(PortAudioStream stream) -> PortAudioStream"""
  return _cerevoice_aud.continueplaying(*args)

def beep(*args):
  """beep(float seconds, int hertz, float amplitude, int sample_rate) -> wavmono"""
  return _cerevoice_aud.beep(*args)

def riff_load(*args):
  """riff_load(char fname) -> wavmono"""
  return _cerevoice_aud.riff_load(*args)

def riff_save(*args):
  """riff_save(wavmono wav, char fname)"""
  return _cerevoice_aud.riff_save(*args)

def open_audiostream(*args):
  """open_audiostream(int sample_rate) -> PABLIO_Stream"""
  return _cerevoice_aud.open_audiostream(*args)

def play_audiostream(*args):
  """play_audiostream(PABLIO_Stream as, short data, int numsamples, lock l)"""
  return _cerevoice_aud.play_audiostream(*args)

def close_audiostream(*args):
  """close_audiostream(PABLIO_Stream as)"""
  return _cerevoice_aud.close_audiostream(*args)

def lock_new():
  """lock_new() -> lock"""
  return _cerevoice_aud.lock_new()

def lock_delete(*args):
  """lock_delete(lock l)"""
  return _cerevoice_aud.lock_delete(*args)

def buffertostring(*args):
  """buffertostring(wavmono data) -> RCD_audio_string"""
  return _cerevoice_aud.buffertostring(*args)


