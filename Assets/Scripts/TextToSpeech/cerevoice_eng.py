# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cerevoice_eng', [dirname(__file__)])
        except ImportError:
            import _cerevoice_eng
            return _cerevoice_eng
        if fp is not None:
            try:
                _mod = imp.load_module('_cerevoice_eng', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cerevoice_eng = swig_import_helper()
    del swig_import_helper
else:
    import _cerevoice_eng
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def engine_set_callback(*args):
  """engine_set_callback(CPRCEN_engine eng, CPRCEN_channel_handle chan, PyObject pyclass) -> int"""
  return _cerevoice_eng.engine_set_callback(*args)

def engine_set_text_callback(*args):
  """engine_set_text_callback(CPRCEN_engine eng, CPRCEN_channel_handle chan, PyObject pyinstance) -> int"""
  return _cerevoice_eng.engine_set_text_callback(*args)

def data_to_abuf(*args):
  """data_to_abuf(long l) -> CPRC_abuf"""
  return _cerevoice_eng.data_to_abuf(*args)
class CPRCEN_wav(_object):
    """Proxy of C++ CPRCEN_wav class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPRCEN_wav, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPRCEN_wav, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wavdata"] = _cerevoice_eng.CPRCEN_wav_wavdata_set
    __swig_getmethods__["wavdata"] = _cerevoice_eng.CPRCEN_wav_wavdata_get
    if _newclass:wavdata = _swig_property(_cerevoice_eng.CPRCEN_wav_wavdata_get, _cerevoice_eng.CPRCEN_wav_wavdata_set)
    __swig_setmethods__["size"] = _cerevoice_eng.CPRCEN_wav_size_set
    __swig_getmethods__["size"] = _cerevoice_eng.CPRCEN_wav_size_get
    if _newclass:size = _swig_property(_cerevoice_eng.CPRCEN_wav_size_get, _cerevoice_eng.CPRCEN_wav_size_set)
    __swig_setmethods__["sample_rate"] = _cerevoice_eng.CPRCEN_wav_sample_rate_set
    __swig_getmethods__["sample_rate"] = _cerevoice_eng.CPRCEN_wav_sample_rate_get
    if _newclass:sample_rate = _swig_property(_cerevoice_eng.CPRCEN_wav_sample_rate_get, _cerevoice_eng.CPRCEN_wav_sample_rate_set)
    def __init__(self): 
        """__init__(self) -> CPRCEN_wav"""
        this = _cerevoice_eng.new_CPRCEN_wav()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cerevoice_eng.delete_CPRCEN_wav
    __del__ = lambda self : None;
CPRCEN_wav_swigregister = _cerevoice_eng.CPRCEN_wav_swigregister
CPRCEN_wav_swigregister(CPRCEN_wav)


def CPRCEN_engine_load(*args):
  """CPRCEN_engine_load(char licensef, char voicef) -> CPRCEN_engine"""
  return _cerevoice_eng.CPRCEN_engine_load(*args)

def CPRCEN_engine_load_config(*args):
  """CPRCEN_engine_load_config(char licensef, char voicef, char voice_configf) -> CPRCEN_engine"""
  return _cerevoice_eng.CPRCEN_engine_load_config(*args)

def CPRCEN_engine_delete(*args):
  """CPRCEN_engine_delete(CPRCEN_engine eng)"""
  return _cerevoice_eng.CPRCEN_engine_delete(*args)

def CPRCEN_engine_speak(*args):
  """CPRCEN_engine_speak(CPRCEN_engine eng, char text) -> CPRCEN_wav"""
  return _cerevoice_eng.CPRCEN_engine_speak(*args)

def CPRCEN_engine_speak_to_file(*args):
  """CPRCEN_engine_speak_to_file(CPRCEN_engine eng, char text, char fname) -> int"""
  return _cerevoice_eng.CPRCEN_engine_speak_to_file(*args)

def CPRCEN_engine_clear(*args):
  """CPRCEN_engine_clear(CPRCEN_engine eng) -> int"""
  return _cerevoice_eng.CPRCEN_engine_clear(*args)
CPRC_VOICE_LOAD = _cerevoice_eng.CPRC_VOICE_LOAD
CPRC_VOICE_LOAD_EMB = _cerevoice_eng.CPRC_VOICE_LOAD_EMB
CPRC_VOICE_LOAD_EMB_AUDIO = _cerevoice_eng.CPRC_VOICE_LOAD_EMB_AUDIO
CPRC_VOICE_LOAD_MEMMAP = _cerevoice_eng.CPRC_VOICE_LOAD_MEMMAP
CPRC_VOICE_LOAD_TP = _cerevoice_eng.CPRC_VOICE_LOAD_TP
CPRCEN_RAW = _cerevoice_eng.CPRCEN_RAW
CPRCEN_RIFF = _cerevoice_eng.CPRCEN_RIFF
CPRCEN_AIFF = _cerevoice_eng.CPRCEN_AIFF
CPRCEN_SYNTH_NONE = _cerevoice_eng.CPRCEN_SYNTH_NONE
CPRCEN_SYNTH_USEL = _cerevoice_eng.CPRCEN_SYNTH_USEL
CPRCEN_SYNTH_HTS = _cerevoice_eng.CPRCEN_SYNTH_HTS
CPRC_ABUF_TRANS_PHONE = _cerevoice_eng.CPRC_ABUF_TRANS_PHONE
CPRC_ABUF_TRANS_WORD = _cerevoice_eng.CPRC_ABUF_TRANS_WORD
CPRC_ABUF_TRANS_MARK = _cerevoice_eng.CPRC_ABUF_TRANS_MARK
CPRC_ABUF_TRANS_ERROR = _cerevoice_eng.CPRC_ABUF_TRANS_ERROR
CPRC_ABUF_TRANS_TYPES = _cerevoice_eng.CPRC_ABUF_TRANS_TYPES
class CPRC_abuf_trans(_object):
    """Proxy of C++ CPRC_abuf_trans class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPRC_abuf_trans, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPRC_abuf_trans, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _cerevoice_eng.CPRC_abuf_trans_name_set
    __swig_getmethods__["name"] = _cerevoice_eng.CPRC_abuf_trans_name_get
    if _newclass:name = _swig_property(_cerevoice_eng.CPRC_abuf_trans_name_get, _cerevoice_eng.CPRC_abuf_trans_name_set)
    __swig_setmethods__["type"] = _cerevoice_eng.CPRC_abuf_trans_type_set
    __swig_getmethods__["type"] = _cerevoice_eng.CPRC_abuf_trans_type_get
    if _newclass:type = _swig_property(_cerevoice_eng.CPRC_abuf_trans_type_get, _cerevoice_eng.CPRC_abuf_trans_type_set)
    __swig_setmethods__["start"] = _cerevoice_eng.CPRC_abuf_trans_start_set
    __swig_getmethods__["start"] = _cerevoice_eng.CPRC_abuf_trans_start_get
    if _newclass:start = _swig_property(_cerevoice_eng.CPRC_abuf_trans_start_get, _cerevoice_eng.CPRC_abuf_trans_start_set)
    __swig_setmethods__["end"] = _cerevoice_eng.CPRC_abuf_trans_end_set
    __swig_getmethods__["end"] = _cerevoice_eng.CPRC_abuf_trans_end_get
    if _newclass:end = _swig_property(_cerevoice_eng.CPRC_abuf_trans_end_get, _cerevoice_eng.CPRC_abuf_trans_end_set)
    __swig_setmethods__["dsp"] = _cerevoice_eng.CPRC_abuf_trans_dsp_set
    __swig_getmethods__["dsp"] = _cerevoice_eng.CPRC_abuf_trans_dsp_get
    if _newclass:dsp = _swig_property(_cerevoice_eng.CPRC_abuf_trans_dsp_get, _cerevoice_eng.CPRC_abuf_trans_dsp_set)
    __swig_setmethods__["phone"] = _cerevoice_eng.CPRC_abuf_trans_phone_set
    __swig_getmethods__["phone"] = _cerevoice_eng.CPRC_abuf_trans_phone_get
    if _newclass:phone = _swig_property(_cerevoice_eng.CPRC_abuf_trans_phone_get, _cerevoice_eng.CPRC_abuf_trans_phone_set)
    def __init__(self): 
        """__init__(self) -> CPRC_abuf_trans"""
        this = _cerevoice_eng.new_CPRC_abuf_trans()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cerevoice_eng.delete_CPRC_abuf_trans
    __del__ = lambda self : None;
CPRC_abuf_trans_swigregister = _cerevoice_eng.CPRC_abuf_trans_swigregister
CPRC_abuf_trans_swigregister(CPRC_abuf_trans)

class CPTP_fixedbuf(_object):
    """Proxy of C++ CPTP_fixedbuf class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPTP_fixedbuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPTP_fixedbuf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_size"] = _cerevoice_eng.CPTP_fixedbuf__size_set
    __swig_getmethods__["_size"] = _cerevoice_eng.CPTP_fixedbuf__size_get
    if _newclass:_size = _swig_property(_cerevoice_eng.CPTP_fixedbuf__size_get, _cerevoice_eng.CPTP_fixedbuf__size_set)
    __swig_setmethods__["_buffer"] = _cerevoice_eng.CPTP_fixedbuf__buffer_set
    __swig_getmethods__["_buffer"] = _cerevoice_eng.CPTP_fixedbuf__buffer_get
    if _newclass:_buffer = _swig_property(_cerevoice_eng.CPTP_fixedbuf__buffer_get, _cerevoice_eng.CPTP_fixedbuf__buffer_set)
    def __init__(self): 
        """__init__(self) -> CPTP_fixedbuf"""
        this = _cerevoice_eng.new_CPTP_fixedbuf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cerevoice_eng.delete_CPTP_fixedbuf
    __del__ = lambda self : None;
CPTP_fixedbuf_swigregister = _cerevoice_eng.CPTP_fixedbuf_swigregister
CPTP_fixedbuf_swigregister(CPTP_fixedbuf)


def CPRCEN_engine_new():
  """CPRCEN_engine_new() -> CPRCEN_engine"""
  return _cerevoice_eng.CPRCEN_engine_new()

def CPRCEN_engine_load_voice(*args):
  """
    CPRCEN_engine_load_voice(CPRCEN_engine eng, char licensef, char configf, char voicef, 
        enum CPRC_VOICE_LOAD_TYPE load_type) -> int
    """
  return _cerevoice_eng.CPRCEN_engine_load_voice(*args)

def CPRCEN_engine_unload_voice(*args):
  """CPRCEN_engine_unload_voice(CPRCEN_engine eng, int voice_index) -> int"""
  return _cerevoice_eng.CPRCEN_engine_unload_voice(*args)

def CPRCEN_engine_load_user_lexicon(*args):
  """CPRCEN_engine_load_user_lexicon(CPRCEN_engine eng, int voice_index, char fname) -> int"""
  return _cerevoice_eng.CPRCEN_engine_load_user_lexicon(*args)

def CPRCEN_engine_load_user_abbreviations(*args):
  """CPRCEN_engine_load_user_abbreviations(CPRCEN_engine eng, int voice_index, char fname) -> int"""
  return _cerevoice_eng.CPRCEN_engine_load_user_abbreviations(*args)

def CPRCEN_engine_load_channel_lexicon(*args):
  """
    CPRCEN_engine_load_channel_lexicon(CPRCEN_engine eng, CPRCEN_channel_handle chan, char fname, 
        char lname) -> int
    """
  return _cerevoice_eng.CPRCEN_engine_load_channel_lexicon(*args)

def CPRCEN_engine_load_channel_abbreviation(*args):
  """
    CPRCEN_engine_load_channel_abbreviation(CPRCEN_engine eng, CPRCEN_channel_handle chan, char fname, 
        char aname) -> int
    """
  return _cerevoice_eng.CPRCEN_engine_load_channel_abbreviation(*args)

def CPRCEN_engine_load_channel_pbreak(*args):
  """CPRCEN_engine_load_channel_pbreak(CPRCEN_engine eng, CPRCEN_channel_handle chan, char fname) -> int"""
  return _cerevoice_eng.CPRCEN_engine_load_channel_pbreak(*args)

def CPRCEN_engine_get_voice_count(*args):
  """CPRCEN_engine_get_voice_count(CPRCEN_engine eng) -> int"""
  return _cerevoice_eng.CPRCEN_engine_get_voice_count(*args)

def CPRCEN_engine_get_voice_info(*args):
  """CPRCEN_engine_get_voice_info(CPRCEN_engine eng, int voice_index, char key) -> char"""
  return _cerevoice_eng.CPRCEN_engine_get_voice_info(*args)

def CPRCEN_engine_get_voice_file_info(*args):
  """CPRCEN_engine_get_voice_file_info(char fname, char key) -> char"""
  return _cerevoice_eng.CPRCEN_engine_get_voice_file_info(*args)

def CPRCEN_engine_open_channel(*args):
  """
    CPRCEN_engine_open_channel(CPRCEN_engine eng, char iso_language_code, char iso_region_code, 
        char voice_name, char srate) -> CPRCEN_channel_handle
    """
  return _cerevoice_eng.CPRCEN_engine_open_channel(*args)

def CPRCEN_engine_open_default_channel(*args):
  """CPRCEN_engine_open_default_channel(CPRCEN_engine eng) -> CPRCEN_channel_handle"""
  return _cerevoice_eng.CPRCEN_engine_open_default_channel(*args)

def CPRCEN_engine_channel_reset(*args):
  """CPRCEN_engine_channel_reset(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> int"""
  return _cerevoice_eng.CPRCEN_engine_channel_reset(*args)

def CPRCEN_engine_channel_close(*args):
  """CPRCEN_engine_channel_close(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> int"""
  return _cerevoice_eng.CPRCEN_engine_channel_close(*args)

def CPRCEN_engine_set_callback(*args):
  """
    CPRCEN_engine_set_callback(CPRCEN_engine eng, CPRCEN_channel_handle chan, void userdata, 
        cprcen_channel_callback callback) -> int
    """
  return _cerevoice_eng.CPRCEN_engine_set_callback(*args)

def CPRCEN_engine_clear_callback(*args):
  """CPRCEN_engine_clear_callback(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> int"""
  return _cerevoice_eng.CPRCEN_engine_clear_callback(*args)

def CPRCEN_engine_get_channel_userdata(*args):
  """CPRCEN_engine_get_channel_userdata(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> void"""
  return _cerevoice_eng.CPRCEN_engine_get_channel_userdata(*args)

def CPRCEN_engine_channel_speak(*args):
  """
    CPRCEN_engine_channel_speak(CPRCEN_engine eng, CPRCEN_channel_handle chan, char text, 
        int textlen, int flush) -> CPRC_abuf
    """
  return _cerevoice_eng.CPRCEN_engine_channel_speak(*args)

def CPRCEN_channel_get_voice_info(*args):
  """CPRCEN_channel_get_voice_info(CPRCEN_engine eng, CPRCEN_channel_handle chan, char key) -> char"""
  return _cerevoice_eng.CPRCEN_channel_get_voice_info(*args)

def CPRCEN_channel_synth_get_type(*args):
  """CPRCEN_channel_synth_get_type(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> enum CPRCEN_SYNTH_TYPE"""
  return _cerevoice_eng.CPRCEN_channel_synth_get_type(*args)

def CPRCEN_engine_channel_to_file(*args):
  """
    CPRCEN_engine_channel_to_file(CPRCEN_engine eng, CPRCEN_channel_handle chan, char fname, 
        enum CPRCEN_AUDIO_FORMAT format) -> int
    """
  return _cerevoice_eng.CPRCEN_engine_channel_to_file(*args)

def CPRCEN_engine_channel_append_to_file(*args):
  """
    CPRCEN_engine_channel_append_to_file(CPRCEN_engine eng, CPRCEN_channel_handle chan, char fname, 
        enum CPRCEN_AUDIO_FORMAT format) -> int
    """
  return _cerevoice_eng.CPRCEN_engine_channel_append_to_file(*args)

def CPRCEN_engine_channel_no_file(*args):
  """CPRCEN_engine_channel_no_file(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> int"""
  return _cerevoice_eng.CPRCEN_engine_channel_no_file(*args)

def CPRCEN_channel_synth_type_hts(*args):
  """CPRCEN_channel_synth_type_hts(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> int"""
  return _cerevoice_eng.CPRCEN_channel_synth_type_hts(*args)

def CPRCEN_channel_synth_type_usel(*args):
  """CPRCEN_channel_synth_type_usel(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> int"""
  return _cerevoice_eng.CPRCEN_channel_synth_type_usel(*args)

def CPRCEN_channel_set_phone_min_max(*args):
  """
    CPRCEN_channel_set_phone_min_max(CPRCEN_engine eng, CPRCEN_channel_handle chan, int min, 
        int max) -> int
    """
  return _cerevoice_eng.CPRCEN_channel_set_phone_min_max(*args)

def CPRC_abuf_get_trans(*args):
  """CPRC_abuf_get_trans(CPRC_abuf ab, int i) -> CPRC_abuf_trans"""
  return _cerevoice_eng.CPRC_abuf_get_trans(*args)

def CPRC_abuf_trans_sz(*args):
  """CPRC_abuf_trans_sz(CPRC_abuf ab) -> int"""
  return _cerevoice_eng.CPRC_abuf_trans_sz(*args)

def CPRC_abuf_trans_name(*args):
  """CPRC_abuf_trans_name(CPRC_abuf_trans t) -> char"""
  return _cerevoice_eng.CPRC_abuf_trans_name(*args)

def CPRC_abuf_trans_type(*args):
  """CPRC_abuf_trans_type(CPRC_abuf_trans t) -> enum CPRC_ABUF_TRANS"""
  return _cerevoice_eng.CPRC_abuf_trans_type(*args)

def CPRC_abuf_trans_start(*args):
  """CPRC_abuf_trans_start(CPRC_abuf_trans t) -> float"""
  return _cerevoice_eng.CPRC_abuf_trans_start(*args)

def CPRC_abuf_trans_end(*args):
  """CPRC_abuf_trans_end(CPRC_abuf_trans t) -> float"""
  return _cerevoice_eng.CPRC_abuf_trans_end(*args)

def CPRC_abuf_wav_sz(*args):
  """CPRC_abuf_wav_sz(CPRC_abuf ab) -> int"""
  return _cerevoice_eng.CPRC_abuf_wav_sz(*args)

def CPRC_abuf_wav(*args):
  """CPRC_abuf_wav(CPRC_abuf ab, int i) -> short"""
  return _cerevoice_eng.CPRC_abuf_wav(*args)

def CPRC_abuf_wav_data(*args):
  """CPRC_abuf_wav_data(CPRC_abuf ab) -> short"""
  return _cerevoice_eng.CPRC_abuf_wav_data(*args)

def CPRC_abuf_wav_mk(*args):
  """CPRC_abuf_wav_mk(CPRC_abuf ab) -> int"""
  return _cerevoice_eng.CPRC_abuf_wav_mk(*args)

def CPRC_abuf_wav_done(*args):
  """CPRC_abuf_wav_done(CPRC_abuf ab) -> int"""
  return _cerevoice_eng.CPRC_abuf_wav_done(*args)

def CPRC_abuf_wav_srate(*args):
  """CPRC_abuf_wav_srate(CPRC_abuf ab) -> int"""
  return _cerevoice_eng.CPRC_abuf_wav_srate(*args)

def CPRC_riff_save(*args):
  """CPRC_riff_save(CPRC_abuf wav, char fname) -> int"""
  return _cerevoice_eng.CPRC_riff_save(*args)

def CPRC_riff_append(*args):
  """CPRC_riff_append(CPRC_abuf wav, char fname) -> int"""
  return _cerevoice_eng.CPRC_riff_append(*args)

def CPRC_riff_save_trans(*args):
  """CPRC_riff_save_trans(CPRC_abuf wav, char fname) -> int"""
  return _cerevoice_eng.CPRC_riff_save_trans(*args)

def CPRC_riff_buffer(*args):
  """CPRC_riff_buffer(CPRC_abuf wav) -> CPTP_fixedbuf"""
  return _cerevoice_eng.CPRC_riff_buffer(*args)

def CPTP_fixedbuf_delete(*args):
  """CPTP_fixedbuf_delete(CPTP_fixedbuf fb)"""
  return _cerevoice_eng.CPTP_fixedbuf_delete(*args)

def CPRC_abuf_copy(*args):
  """CPRC_abuf_copy(CPRC_abuf ab) -> CPRC_abuf"""
  return _cerevoice_eng.CPRC_abuf_copy(*args)

def CPRC_abuf_delete(*args):
  """CPRC_abuf_delete(CPRC_abuf ab)"""
  return _cerevoice_eng.CPRC_abuf_delete(*args)
CPRCEN_CHAN_FULL = _cerevoice_eng.CPRCEN_CHAN_FULL
CPRCEN_CHAN_TK = _cerevoice_eng.CPRCEN_CHAN_TK
CPRCEN_CHAN_BACK = _cerevoice_eng.CPRCEN_CHAN_BACK
CPRCEN_CHAN_NORM = _cerevoice_eng.CPRCEN_CHAN_NORM
CPRCEN_CHAN_SPURT = _cerevoice_eng.CPRCEN_CHAN_SPURT
CPRCEN_CHAN_ABOOK = _cerevoice_eng.CPRCEN_CHAN_ABOOK
CPRC_ABUF_TRANS_STATUS_NODSP = _cerevoice_eng.CPRC_ABUF_TRANS_STATUS_NODSP
CPRC_ABUF_TRANS_STATUS_DSPTODO = _cerevoice_eng.CPRC_ABUF_TRANS_STATUS_DSPTODO
CPRC_ABUF_TRANS_STATUS_DSPDONE = _cerevoice_eng.CPRC_ABUF_TRANS_STATUS_DSPDONE
class CPRC_abuf_dsp(_object):
    """Proxy of C++ CPRC_abuf_dsp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPRC_abuf_dsp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPRC_abuf_dsp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _cerevoice_eng.CPRC_abuf_dsp_status_set
    __swig_getmethods__["status"] = _cerevoice_eng.CPRC_abuf_dsp_status_get
    if _newclass:status = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_status_get, _cerevoice_eng.CPRC_abuf_dsp_status_set)
    __swig_setmethods__["mid"] = _cerevoice_eng.CPRC_abuf_dsp_mid_set
    __swig_getmethods__["mid"] = _cerevoice_eng.CPRC_abuf_dsp_mid_get
    if _newclass:mid = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_mid_get, _cerevoice_eng.CPRC_abuf_dsp_mid_set)
    __swig_setmethods__["dur"] = _cerevoice_eng.CPRC_abuf_dsp_dur_set
    __swig_getmethods__["dur"] = _cerevoice_eng.CPRC_abuf_dsp_dur_get
    if _newclass:dur = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_dur_get, _cerevoice_eng.CPRC_abuf_dsp_dur_set)
    __swig_setmethods__["f0h1"] = _cerevoice_eng.CPRC_abuf_dsp_f0h1_set
    __swig_getmethods__["f0h1"] = _cerevoice_eng.CPRC_abuf_dsp_f0h1_get
    if _newclass:f0h1 = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_f0h1_get, _cerevoice_eng.CPRC_abuf_dsp_f0h1_set)
    __swig_setmethods__["f0h2"] = _cerevoice_eng.CPRC_abuf_dsp_f0h2_set
    __swig_getmethods__["f0h2"] = _cerevoice_eng.CPRC_abuf_dsp_f0h2_get
    if _newclass:f0h2 = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_f0h2_get, _cerevoice_eng.CPRC_abuf_dsp_f0h2_set)
    __swig_setmethods__["lognrg"] = _cerevoice_eng.CPRC_abuf_dsp_lognrg_set
    __swig_getmethods__["lognrg"] = _cerevoice_eng.CPRC_abuf_dsp_lognrg_get
    if _newclass:lognrg = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_lognrg_get, _cerevoice_eng.CPRC_abuf_dsp_lognrg_set)
    __swig_setmethods__["usel_start"] = _cerevoice_eng.CPRC_abuf_dsp_usel_start_set
    __swig_getmethods__["usel_start"] = _cerevoice_eng.CPRC_abuf_dsp_usel_start_get
    if _newclass:usel_start = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_usel_start_get, _cerevoice_eng.CPRC_abuf_dsp_usel_start_set)
    __swig_setmethods__["usel_mid"] = _cerevoice_eng.CPRC_abuf_dsp_usel_mid_set
    __swig_getmethods__["usel_mid"] = _cerevoice_eng.CPRC_abuf_dsp_usel_mid_get
    if _newclass:usel_mid = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_usel_mid_get, _cerevoice_eng.CPRC_abuf_dsp_usel_mid_set)
    __swig_setmethods__["usel_end"] = _cerevoice_eng.CPRC_abuf_dsp_usel_end_set
    __swig_getmethods__["usel_end"] = _cerevoice_eng.CPRC_abuf_dsp_usel_end_get
    if _newclass:usel_end = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_usel_end_get, _cerevoice_eng.CPRC_abuf_dsp_usel_end_set)
    __swig_setmethods__["usel_dur"] = _cerevoice_eng.CPRC_abuf_dsp_usel_dur_set
    __swig_getmethods__["usel_dur"] = _cerevoice_eng.CPRC_abuf_dsp_usel_dur_get
    if _newclass:usel_dur = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_usel_dur_get, _cerevoice_eng.CPRC_abuf_dsp_usel_dur_set)
    __swig_setmethods__["usel_f0h1"] = _cerevoice_eng.CPRC_abuf_dsp_usel_f0h1_set
    __swig_getmethods__["usel_f0h1"] = _cerevoice_eng.CPRC_abuf_dsp_usel_f0h1_get
    if _newclass:usel_f0h1 = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_usel_f0h1_get, _cerevoice_eng.CPRC_abuf_dsp_usel_f0h1_set)
    __swig_setmethods__["usel_f0h2"] = _cerevoice_eng.CPRC_abuf_dsp_usel_f0h2_set
    __swig_getmethods__["usel_f0h2"] = _cerevoice_eng.CPRC_abuf_dsp_usel_f0h2_get
    if _newclass:usel_f0h2 = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_usel_f0h2_get, _cerevoice_eng.CPRC_abuf_dsp_usel_f0h2_set)
    __swig_setmethods__["usel_lognrg"] = _cerevoice_eng.CPRC_abuf_dsp_usel_lognrg_set
    __swig_getmethods__["usel_lognrg"] = _cerevoice_eng.CPRC_abuf_dsp_usel_lognrg_get
    if _newclass:usel_lognrg = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_usel_lognrg_get, _cerevoice_eng.CPRC_abuf_dsp_usel_lognrg_set)
    __swig_setmethods__["dsp_dur"] = _cerevoice_eng.CPRC_abuf_dsp_dsp_dur_set
    __swig_getmethods__["dsp_dur"] = _cerevoice_eng.CPRC_abuf_dsp_dsp_dur_get
    if _newclass:dsp_dur = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_dsp_dur_get, _cerevoice_eng.CPRC_abuf_dsp_dsp_dur_set)
    __swig_setmethods__["dsp_f0h1"] = _cerevoice_eng.CPRC_abuf_dsp_dsp_f0h1_set
    __swig_getmethods__["dsp_f0h1"] = _cerevoice_eng.CPRC_abuf_dsp_dsp_f0h1_get
    if _newclass:dsp_f0h1 = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_dsp_f0h1_get, _cerevoice_eng.CPRC_abuf_dsp_dsp_f0h1_set)
    __swig_setmethods__["dsp_f0h2"] = _cerevoice_eng.CPRC_abuf_dsp_dsp_f0h2_set
    __swig_getmethods__["dsp_f0h2"] = _cerevoice_eng.CPRC_abuf_dsp_dsp_f0h2_get
    if _newclass:dsp_f0h2 = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_dsp_f0h2_get, _cerevoice_eng.CPRC_abuf_dsp_dsp_f0h2_set)
    __swig_setmethods__["dsp_lognrg"] = _cerevoice_eng.CPRC_abuf_dsp_dsp_lognrg_set
    __swig_getmethods__["dsp_lognrg"] = _cerevoice_eng.CPRC_abuf_dsp_dsp_lognrg_get
    if _newclass:dsp_lognrg = _swig_property(_cerevoice_eng.CPRC_abuf_dsp_dsp_lognrg_get, _cerevoice_eng.CPRC_abuf_dsp_dsp_lognrg_set)
    def __init__(self): 
        """__init__(self) -> CPRC_abuf_dsp"""
        this = _cerevoice_eng.new_CPRC_abuf_dsp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cerevoice_eng.delete_CPRC_abuf_dsp
    __del__ = lambda self : None;
CPRC_abuf_dsp_swigregister = _cerevoice_eng.CPRC_abuf_dsp_swigregister
CPRC_abuf_dsp_swigregister(CPRC_abuf_dsp)

class CPRC_abuf(_object):
    """Proxy of C++ CPRC_abuf class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPRC_abuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPRC_abuf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wav_sz"] = _cerevoice_eng.CPRC_abuf_wav_sz_set
    __swig_getmethods__["wav_sz"] = _cerevoice_eng.CPRC_abuf_wav_sz_get
    if _newclass:wav_sz = _swig_property(_cerevoice_eng.CPRC_abuf_wav_sz_get, _cerevoice_eng.CPRC_abuf_wav_sz_set)
    __swig_setmethods__["wav_done"] = _cerevoice_eng.CPRC_abuf_wav_done_set
    __swig_getmethods__["wav_done"] = _cerevoice_eng.CPRC_abuf_wav_done_get
    if _newclass:wav_done = _swig_property(_cerevoice_eng.CPRC_abuf_wav_done_get, _cerevoice_eng.CPRC_abuf_wav_done_set)
    __swig_setmethods__["wav_mem"] = _cerevoice_eng.CPRC_abuf_wav_mem_set
    __swig_getmethods__["wav_mem"] = _cerevoice_eng.CPRC_abuf_wav_mem_get
    if _newclass:wav_mem = _swig_property(_cerevoice_eng.CPRC_abuf_wav_mem_get, _cerevoice_eng.CPRC_abuf_wav_mem_set)
    __swig_setmethods__["wav_mk"] = _cerevoice_eng.CPRC_abuf_wav_mk_set
    __swig_getmethods__["wav_mk"] = _cerevoice_eng.CPRC_abuf_wav_mk_get
    if _newclass:wav_mk = _swig_property(_cerevoice_eng.CPRC_abuf_wav_mk_get, _cerevoice_eng.CPRC_abuf_wav_mk_set)
    __swig_setmethods__["srate"] = _cerevoice_eng.CPRC_abuf_srate_set
    __swig_getmethods__["srate"] = _cerevoice_eng.CPRC_abuf_srate_get
    if _newclass:srate = _swig_property(_cerevoice_eng.CPRC_abuf_srate_get, _cerevoice_eng.CPRC_abuf_srate_set)
    __swig_setmethods__["wav"] = _cerevoice_eng.CPRC_abuf_wav_set
    __swig_getmethods__["wav"] = _cerevoice_eng.CPRC_abuf_wav_get
    if _newclass:wav = _swig_property(_cerevoice_eng.CPRC_abuf_wav_get, _cerevoice_eng.CPRC_abuf_wav_set)
    __swig_setmethods__["trans_char_sz"] = _cerevoice_eng.CPRC_abuf_trans_char_sz_set
    __swig_getmethods__["trans_char_sz"] = _cerevoice_eng.CPRC_abuf_trans_char_sz_get
    if _newclass:trans_char_sz = _swig_property(_cerevoice_eng.CPRC_abuf_trans_char_sz_get, _cerevoice_eng.CPRC_abuf_trans_char_sz_set)
    __swig_setmethods__["trans_char_mem"] = _cerevoice_eng.CPRC_abuf_trans_char_mem_set
    __swig_getmethods__["trans_char_mem"] = _cerevoice_eng.CPRC_abuf_trans_char_mem_get
    if _newclass:trans_char_mem = _swig_property(_cerevoice_eng.CPRC_abuf_trans_char_mem_get, _cerevoice_eng.CPRC_abuf_trans_char_mem_set)
    __swig_setmethods__["trans_char"] = _cerevoice_eng.CPRC_abuf_trans_char_set
    __swig_getmethods__["trans_char"] = _cerevoice_eng.CPRC_abuf_trans_char_get
    if _newclass:trans_char = _swig_property(_cerevoice_eng.CPRC_abuf_trans_char_get, _cerevoice_eng.CPRC_abuf_trans_char_set)
    __swig_setmethods__["trans_sz"] = _cerevoice_eng.CPRC_abuf_trans_sz_set
    __swig_getmethods__["trans_sz"] = _cerevoice_eng.CPRC_abuf_trans_sz_get
    if _newclass:trans_sz = _swig_property(_cerevoice_eng.CPRC_abuf_trans_sz_get, _cerevoice_eng.CPRC_abuf_trans_sz_set)
    __swig_setmethods__["trans_sz_type"] = _cerevoice_eng.CPRC_abuf_trans_sz_type_set
    __swig_getmethods__["trans_sz_type"] = _cerevoice_eng.CPRC_abuf_trans_sz_type_get
    if _newclass:trans_sz_type = _swig_property(_cerevoice_eng.CPRC_abuf_trans_sz_type_get, _cerevoice_eng.CPRC_abuf_trans_sz_type_set)
    __swig_setmethods__["trans_mem"] = _cerevoice_eng.CPRC_abuf_trans_mem_set
    __swig_getmethods__["trans_mem"] = _cerevoice_eng.CPRC_abuf_trans_mem_get
    if _newclass:trans_mem = _swig_property(_cerevoice_eng.CPRC_abuf_trans_mem_get, _cerevoice_eng.CPRC_abuf_trans_mem_set)
    __swig_setmethods__["trans"] = _cerevoice_eng.CPRC_abuf_trans_set
    __swig_getmethods__["trans"] = _cerevoice_eng.CPRC_abuf_trans_get
    if _newclass:trans = _swig_property(_cerevoice_eng.CPRC_abuf_trans_get, _cerevoice_eng.CPRC_abuf_trans_set)
    __swig_setmethods__["dsps_mem"] = _cerevoice_eng.CPRC_abuf_dsps_mem_set
    __swig_getmethods__["dsps_mem"] = _cerevoice_eng.CPRC_abuf_dsps_mem_get
    if _newclass:dsps_mem = _swig_property(_cerevoice_eng.CPRC_abuf_dsps_mem_get, _cerevoice_eng.CPRC_abuf_dsps_mem_set)
    __swig_setmethods__["dsps"] = _cerevoice_eng.CPRC_abuf_dsps_set
    __swig_getmethods__["dsps"] = _cerevoice_eng.CPRC_abuf_dsps_get
    if _newclass:dsps = _swig_property(_cerevoice_eng.CPRC_abuf_dsps_get, _cerevoice_eng.CPRC_abuf_dsps_set)
    def __init__(self): 
        """__init__(self) -> CPRC_abuf"""
        this = _cerevoice_eng.new_CPRC_abuf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cerevoice_eng.delete_CPRC_abuf
    __del__ = lambda self : None;
CPRC_abuf_swigregister = _cerevoice_eng.CPRC_abuf_swigregister
CPRC_abuf_swigregister(CPRC_abuf)


def CPRCEN_engine_load_voice_licensestr(*args):
  """
    CPRCEN_engine_load_voice_licensestr(CPRCEN_engine eng, char license_text, char signature, 
        char configf, char voicef, enum CPRC_VOICE_LOAD_TYPE load_type) -> int
    """
  return _cerevoice_eng.CPRCEN_engine_load_voice_licensestr(*args)

def CPRCEN_engine_open_channel_with_type(*args):
  """
    CPRCEN_engine_open_channel_with_type(CPRCEN_engine eng, enum CPRCEN_CHANNEL_TYPE type, char iso_language_code, 
        char iso_region_code, 
        char voice_code, char srate) -> CPRCEN_channel_handle
    """
  return _cerevoice_eng.CPRCEN_engine_open_channel_with_type(*args)

def CPRCEN_channel_get_cerevoice(*args):
  """CPRCEN_channel_get_cerevoice(CPRCEN_engine eng, CPRCEN_channel_handle hc) -> CPRC_voice"""
  return _cerevoice_eng.CPRCEN_channel_get_cerevoice(*args)

def CPRCEN_engine_chan_text_process(*args):
  """
    CPRCEN_engine_chan_text_process(CPRCEN_engine eng, CPRCEN_channel_handle chan, char text, 
        int textlen, int flush) -> char
    """
  return _cerevoice_eng.CPRCEN_engine_chan_text_process(*args)

def CPRCEN_engine_channel_speak_spurt(*args):
  """
    CPRCEN_engine_channel_speak_spurt(CPRCEN_engine eng, CPRCEN_channel_handle chan, char text, 
        int textlen) -> CPRC_abuf
    """
  return _cerevoice_eng.CPRCEN_engine_channel_speak_spurt(*args)

def CPRCEN_engine_chan_get_last_spurt(*args):
  """CPRCEN_engine_chan_get_last_spurt(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> char"""
  return _cerevoice_eng.CPRCEN_engine_chan_get_last_spurt(*args)

def CPRCEN_engine_chan_get_last_tpspurt(*args):
  """CPRCEN_engine_chan_get_last_tpspurt(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> char"""
  return _cerevoice_eng.CPRCEN_engine_chan_get_last_tpspurt(*args)

def CPRCEN_engine_chan_get_last_spurt_struct(*args):
  """CPRCEN_engine_chan_get_last_spurt_struct(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> CPRC_spurt"""
  return _cerevoice_eng.CPRCEN_engine_chan_get_last_spurt_struct(*args)

def CPRCEN_engine_chan_get_last_units(*args):
  """CPRCEN_engine_chan_get_last_units(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> char"""
  return _cerevoice_eng.CPRCEN_engine_chan_get_last_units(*args)

def CPRCEN_engine_set_text_callback(*args):
  """
    CPRCEN_engine_set_text_callback(CPRCEN_engine eng, CPRCEN_channel_handle chan, void userdata, 
        cprcen_channel_text_callback text_callback) -> int
    """
  return _cerevoice_eng.CPRCEN_engine_set_text_callback(*args)

def CPRCEN_engine_clear_application_callback(*args):
  """CPRCEN_engine_clear_application_callback(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> int"""
  return _cerevoice_eng.CPRCEN_engine_clear_application_callback(*args)

def CPRCEN_engine_set_application_callback(*args):
  """
    CPRCEN_engine_set_application_callback(CPRCEN_engine eng, CPRCEN_channel_handle chan, void userdata, 
        cprcen_channel_text_callback text_callback) -> int
    """
  return _cerevoice_eng.CPRCEN_engine_set_application_callback(*args)

def CPRCEN_engine_get_channel_application_userdata(*args):
  """CPRCEN_engine_get_channel_application_userdata(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> void"""
  return _cerevoice_eng.CPRCEN_engine_get_channel_application_userdata(*args)

def CPRCEN_engine_clear_text_callback(*args):
  """CPRCEN_engine_clear_text_callback(CPRCEN_engine eng, CPRCEN_channel_handle chan) -> int"""
  return _cerevoice_eng.CPRCEN_engine_clear_text_callback(*args)

def CPRCEN_channel_audio_from_file(*args):
  """CPRCEN_channel_audio_from_file(CPRCEN_engine eng, CPRCEN_channel_handle chan, char filename) -> int"""
  return _cerevoice_eng.CPRCEN_channel_audio_from_file(*args)

def CPRC_override_hts_durations(*args):
  """CPRC_override_hts_durations(CPRC_htsspurt htsspurt, CPRC_spurt spt) -> int"""
  return _cerevoice_eng.CPRC_override_hts_durations(*args)

def CPRC_override_hts_f0(*args):
  """CPRC_override_hts_f0(CPRC_htsspurt htsspurt, CPRC_spurt spt) -> int"""
  return _cerevoice_eng.CPRC_override_hts_f0(*args)


